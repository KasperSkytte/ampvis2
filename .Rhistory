if(!is.null(sample_label)) {
if (repel == T){plot <- plot + geom_text_repel(aes_string(label = sample_label),size = sample_label_size, color = "grey40", segment.color = sample_label_segment_color)}
else{plot <- plot + geom_text(aes_string(label = sample_label),size = sample_label_size, color = "grey40", segment.color = sample_label_segment_color)}
}
#Plot species labels
if (species_nlabels > 0) {
if (repel == T){plot <- plot +geom_text_repel(data = dspecies[1:species_nlabels,], aes_string(x = x_axis_name, y = y_axis_name, label = species_label_taxonomy),colour = species_label_color, size = species_label_size,fontface = 4,inherit.aes = FALSE)}
else{plot <- plot +geom_text(data = dspecies[1:species_nlabels,], aes_string(x = x_axis_name, y = y_axis_name, label = species_label_taxonomy),colour = species_label_color, size = species_label_size,fontface = 4,inherit.aes = FALSE)}
}
######## Fit environmental variables ########
# Categorial fitting
if(!is.null(envfit_factor)) {
evf_factor_model <- envfit(model,
data$metadata[,envfit_factor, drop = FALSE],
permutations = 999,
choices = c(x_axis_name, y_axis_name)
)
evf_factor_data <- data.frame(Name = rownames(evf_factor_model$factors$centroids),
Variable = evf_factor_model$factors$var.id,
evf_factor_model$factors$centroids,
pval = evf_factor_model$factors$pvals
) %>% subset(pval <= envfit_signif_level)
if (nrow(evf_factor_data) > 0 & envfit_show == TRUE) {
if (repel == T){plot <- plot + geom_text_repel(data = evf_factor_data,aes_string(x = x_axis_name, y = y_axis_name, label = "Name"), colour = envfit_color, inherit.aes = FALSE, size = envfit_textsize, fontface = "bold")}
else{plot <- plot + geom_text(data = evf_factor_data,aes_string(x = x_axis_name, y = y_axis_name, label = "Name"), colour = envfit_color, inherit.aes = FALSE, size = envfit_textsize, fontface = "bold")}
}
if (nrow(evf_factor_data) == 0) {
warning("No environmental variables fit below the chosen significant level.\n")
}
} else {
evf_factor_model <- NULL
}
# Numerical fitting
if (!is.null(envfit_numeric)) {
evf_numeric_model <- envfit(model,
data$metadata[,envfit_numeric, drop = FALSE],
permutations = 999,
choices = c(x_axis_name, y_axis_name)
)
evf_numeric_data <- data.frame(Name = rownames(evf_numeric_model$vectors$arrows),
evf_numeric_model$vectors$arrows * sqrt(evf_numeric_model$vectors$r) * envfit_numeric_arrows_scale,
pval = evf_numeric_model$vectors$pvals
) %>% subset(pval <= envfit_signif_level)
if (nrow(evf_numeric_data) > 0 & envfit_show == TRUE) {
plot <- plot + geom_segment(data = evf_numeric_data,
aes_string(x = 0,
xend = x_axis_name,
y = 0,
yend = y_axis_name
),
arrow = arrow(length = unit(3, "mm")),
colour = "darkred",
size = 1,
inherit.aes = FALSE) +
geom_text(data = evf_numeric_data,
aes_string(x = x_axis_name,
y = y_axis_name,
label = "Name"),
colour = envfit_color,
inherit.aes = FALSE,
size = envfit_textsize,
hjust = 1.2,
vjust = 1.2,
fontface = "bold"
)
}
if (nrow(evf_numeric_data) == 0) {
warning("No environmental variables fit below the chosen significant level.\n")
}
} else {
evf_numeric_model <- NULL
}
#################################### end of block ####################################
#return plot or additional details
if(!is.null(sample_plotly)){
ggplotly(plot, tooltip = "text") %>%
layout(showlegend = FALSE)
}
else if(species_plotly == T){
ggplotly(plot, tooltip = "text") %>%
layout(showlegend = FALSE)
}
else if(output == "plot"){
return(plot)
}
else if(output == "detailed"){
if (type == "nmds") {
screeplot <- NULL
} else {
### screeplot ###
#the data for it
if (type == "mmds" | type == "pcoa") {
if (length(model$values$Relative_eig) > 10) {
unconstrained_eig <- model$values$Relative_eig[1:10]*100
} else {
unconstrained_eig <- model$values$Relative_eig*100
}
#the scree plot
screeplot <- ggplot(data.frame(axis = factor(as.character(c(1:length(unconstrained_eig))), levels = c(1:length(unconstrained_eig))), eigenvalues = unconstrained_eig), aes(x = axis, y = eigenvalues)) +
geom_col() +
#geom_text(label = round(eigenvalues, 2), vjust = -1, size = 3)  + #Can't get it to work
theme_minimal() +
xlab("Axis (max. 10 axes will be shown)") +
ylab("Eigenvalue in percent of total inertia")
} else {
unconstrained_eig <- model$CA$eig/model$tot.chi*100
constrained_eig <- model$CCA$eig/model$tot.chi*100
if (length(constrained_eig) > 10) {
constrained_eig <- constrained_eig[1:10]
}
if (length(unconstrained_eig) > 10) {
unconstrained_eig <- unconstrained_eig[1:10]
}
eigenvalues <- c(constrained_eig, unconstrained_eig) #constrained combined with unconstrained
#the scree plot
screeplot <- ggplot(data.frame(axis = factor(names(eigenvalues), levels = names(eigenvalues)), eigenvalues = eigenvalues), aes(x = axis, y = eigenvalues)) +
geom_col() +
geom_text(label = round(eigenvalues, 2), vjust = -1, size = 3)  +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Axis (max. 10 axes will be shown)") +
ylab("Eigenvalue in percent of total inertia")
}
}
return(list(plot = plot,
screeplot = screeplot,
model = model,
dsites = dsites,
dspecies = dspecies,
evf_factor_model = evf_factor_model,
evf_numeric_model = evf_numeric_model)
)
}
}
devtools::install_github("kasperskytte/ampvis2")
rm(amp_ordinate)
devtools::install_github("kasperskytte/ampvis2")
devtools::install_github("kasperskytte/ampvis2", force = TRUE)
pkgdown::build_site()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
source("R/*")
source("R/")
source("R/$")
source("R/amp$")
source("R/amp*")
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = “\\.[RrSsQq]$”)) {
if(trace) cat(nm,”:”)
source(file.path(path, nm), …)
if(trace) cat(“\n”)
}
}
for (f in list.files(pattern="R/*.R")) {
source(f)
}
rm(f)
rm(ordplot)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("R/")
sourceDir("R/*")
sourceDir("R")
setwd("")
setwd("/")
sourceDir("R/")
getwd
getwd()
setwd("Users/kasper/Documents/R/GitHub/ampvis2/")
setwd("Users/kasper/Documents/R/GitHub/ampvis2")
setwd("c:/Users/kasper/Documents/R/GitHub/ampvis2")
sourceDir("R/")
getwd()
setwd("C:/Users/kasper/Documents/R/GitHub/ampvis2")
sourceDir("C:/Users/kasper/Documents/R/GitHub/ampvis2/R/")
sourceDir("C:/Users/kasper/Documents/R/GitHub/ampvis2/R/", trace = FALSE)
sourceDir("R/", trace = FALSE)
sourceDir("R/", trace = FALSE)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("R/", trace = FALSE)
sourceDir("C:/Users/kasper/Documents/R/GitHub/ampvis2/R/", trace = FALSE)
sourceDir("R/", trace = FALSE)
source(file.path(path, nm), ...)
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir("R/", trace = FALSE)
list.files(path = "R/")
sourceDir(path = "R/", trace = FALSE)
sourceDir(path = "/R/", trace = FALSE)
list.files(path = "R/")
list.files(path = "R/", pattern = "[.][RrSsQq]$")
for (f in list.files("R/")) {
source(file.path(f))
}
source(file.path("R/", f))
for (f in list.files("R/")) {
source(file.path("R/", f))
}
list.files("R/")
list.files("R/")
sourceDir("./R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f))
}
}
sourceDir("./R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f))
}
}
sourceDir("./R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
if(f) cat(f)
source(file.path(path, f))
if(f) cat("\n")
}
}
sourceDir("./R/")
sourceDir("./R/")
cat(f)
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
cat(f)
source(file.path(path, f))
cat("\n")
}
}
sourceDir("./R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
cat(f)
source(file.path(path, f))
cat("\n")
}
}
sourceDir("./R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f))
}
}
sourceDir("./R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f))
}
}
sourceDir("./R/")
sourceDir("./../R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f))
if(!is.null(f)) cat(f, "\n")
}
}
sourceDir("./../R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f))
cat(f, "\n")
}
}
sourceDir("./../R/")
sourceDir("./../data")
sourceDir("../R/")
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
data("MiD") #skip this line if you are using your own data
read_chunk("../R/")
read_chunk(file.path(path, f))
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
read_chunk(file.path(path, f))
cat(f, "\n")
}
}
sourceDir("./../R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
read_chunk(file.path(path, f))
cat(f, "\n")
}
}
sourceDir("./../R/")
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f), local = TRUE)
cat(f, "\n")
}
}
amp_ordinate(ds,
type = "pcoa",
distmeasure = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant",
sample_plotly = c("Year", "SeqID"))
library(ampvis2)
#A nice function to source all .R files so we dont have to commit twice by first updating functions AND build pkgdown page afterwards!
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f))
cat(f, "\n")
}
}
#it doesn't work though
#sourceDir("./../R/")
data("MiD") #skip this line if you are using your own data
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East"))
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
d_Chloroflexi_Actinobacteria <- amp_subset_taxa(d, tax_vector=c("p__Chloroflexi", "p__Actinobacteria"))
amp_heatmap(ds, group = "Plant")
library(ampvis2)
#A nice function to source all .R files so we dont have to commit twice by first updating functions AND build pkgdown page afterwards!
sourceDir <- function(path) {
for (f in list.files(path, pattern = "[.][RrSsQq]$")) {
source(file.path(path, f))
cat(f, "\n")
}
}
#it doesn't work though
#sourceDir("./../R/")
data("MiD") #skip this line if you are using your own data
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East"))
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
d_Chloroflexi_Actinobacteria <- amp_subset_taxa(d, tax_vector=c("p__Chloroflexi", "p__Actinobacteria"))
amp_heatmap(ds, group = "Plant")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="right")
amp_boxplot(ds,
tax.show = 20)
amp_boxplot(ds,
group = "Period",
tax.show = 5,
tax.add = "Phylum")
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "pcoa",
distmeasure = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant",
sample_plotly = c("Year", "SeqID"))
amp_ordinate(ds,
type = "pcoa",
distmeasure = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant",
sample_plotly = c("Year", "SeqID"))
pkgdown::build_site()
pkgdown::build_articles()
amp_ordinate(ds,
type = "PCA",
distmeasure = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "nmds",
distmeasure = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "pcoa",
distmeasure = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "CA",
transform = "Hellinger",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant")
amp_ordinate(ds,
type = "pcoa",
distmeasure = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "CCA",
constrain = "Year",
transform = "Hellinger",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant")
amp_ordinate(ds,
type = "CCA",
constrain = "Year",
transform = "Hellinger",
sample_color = "Plant",
sample_shape = "Year",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant")
amp_ordinate(ds,
type = "CCA",
constrain = "Period",
transform = "Hellinger",
sample_color = "Plant",
sample_shape = "Period",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant")
amp_ordinate(ds,
type = "CCA",
constrain = "Period",
transform = "Hellinger",
sample_color = "Period",
sample_shape = "Period",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant")
amp_ordinate(ds,
type = "CCA",
constrain = "Period",
transform = "Hellinger",
sample_color = "Period",
sample_shape = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Period")
amp_ordinate(ds,
type = "CCA",
constrain = "Period",
transform = "Hellinger",
sample_color = "Period",
species_plot = TRUE,
sample_shape = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Period")
ordinationresult$screeplot
ordinationresult <- amp_ordinate(ds,
type = "CCA",
constrain = "Period",
transform = "Hellinger",
sample_color = "Period",
sample_shape = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Period",
output = "detailed")
ordinationresult$plot
ordinationresult$screeplot
str(ordinationresult)
class(ordinationresult)
levels(ordinationresult)
summary(ordinationresult)
ordinationresult$model
pkgdown::build_articles()
ordinationresult$model
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
ordinationresult$model
ordinationresult$screeplot
pkgdown::build_articles()
View(ordinationresult$dsites)
View(ordinationresult$dspecies)
roxygen2::roxygenise()
library(devtools)
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_articles()
?ggplot2
?geom_point
amp_heatmap(ds, normalise = "relative")
