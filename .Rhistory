axis.text.y = element_text(size=10),
legend.position="right")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=10),
legend.position="right")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "sqrt",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=10),
legend.position="right")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=10),
legend.position="right")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=10),
legend.position="right") + ggtitle("test")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=10),
legend.position="right") + ggtitle("Aalborg East and West 2006-2013")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=10),
legend.position="right")
amp_heatmap(ds, group = "Plant") + theme_classic()
amp_heatmap(ds, group = "Plant") + theme_minimal()
amp_heatmap(ds, group = "Plant", plot.theme = "clean")
amp_heatmap(ds, group = "Plant")
amp_rankabundance(ds)
amp_rankabundance(ds, group = "Plant")
amp_rarecurve(ds)
amp_boxplot(ds)
amp_boxplot(ds, tax.show = 10)
amp_boxplot(ds, tax.show = 20)
amp_boxplot(ds,
tax.show = 20,raw = T
)
amp_boxplot(ds,
tax.show = 20)
amp_boxplot(ds,
tax.show = 20,
tax.add = "Phylum")
amp_boxplot(ds,
tax.show = 20,
tax.add = "Phylum",
group = "Plant")
amp_boxplot(ds,
tax.show = 10,
tax.add = "Phylum",
group = "Plant")
amp_boxplot(ds,
group = "Plant",
tax.show = 10,
tax.add = "Phylum")
pkgdown::build_site(preview = TRUE)
amp_boxplot(ds)
data("MiD") #skip this line if you are using your own data
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
library(ampvis2)
data("MiD") #skip this line if you are using your own data
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
amp_boxplot(ds)
amp_boxplot(ds,
tax.show = 20)
amp_boxplot(ds,
group = "Plant",
tax.show = 10,
tax.add = "Phylum")
View(amp_boxplot())
View(amp_boxplot)
amp_boxplot(ds,
group = "Plant",
tax.show = 10,
plot.flip = TRUE,
tax.add = "Phylum")
amp_boxplot(ds,
group = "Plant",
tax.show = 5,
plot.flip = TRUE,
tax.add = "Phylum")
amp_timeseries(ds)
amp_timeseries(ds, time = "Year")
View(ds$refseq)
View(d$refseq)
View(d$metadata)
amp_timeseries(ds, time = "Date")
amp_ordinate(ds, group = "Plant")
amp_rankabundance(ds)
amp_rankabundance(ds, group = "Plant")
View(ds$metadata)
amp_boxplot(ds,
group = "Period",
tax.show = 5,
plot.flip = TRUE,
tax.add = "Phylum")
amp_boxplot(ds,
group = "Period",
tax.show = 5,
plot.flip = TRUE,
tax.add = "Phylum")
amp_boxplot(ds,
group = "Period",
tax.show = 5,
tax.add = "Phylum")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="right")
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
amp_boxplot(ds,
tax.show = 20)
amp_boxplot(ds,
group = "Period",
tax.show = 10,
tax.add = "Phylum")
ds$metadata <- droplevels.data.frame(ds$metadata)
amp_boxplot(ds,
group = "Period",
tax.show = 10,
tax.add = "Phylum")
levels(ds$metadata$Period)
amp_boxplot(ds,
group = "Plant",
tax.show = 10,
tax.add = "Phylum")
ds$metadata$Period <- as.character(ds$metadata$Period)
amp_boxplot(ds,
group = "Period",
tax.show = 10,
tax.add = "Phylum")
ds$metadata
ds$metadata$Period
levels(ds$metadata$Period)
unique(ds$metadata$Period)
amp_boxplot(ds,
group = "Period",
tax.show = 10,
tax.add = "Phylum")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="right")
amp_heatmap(ds,
group = c("Plant"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="right")
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="right")
amp_heatmap(ds, group = "Plant")
data("MiD") #skip this line if you are using your own data
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
amp_heatmap(ds, group = "Plant")
source('~/R/GitHub/ampvis2/R/amp_subset_taxa.R')
source('~/R/GitHub/ampvis2/R/amp_subset_samples.R')
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
amp_heatmap(ds, group = "Plant")
amp_boxplot(ds,
group = "Period",
tax.show = 10,
tax.add = "Phylum")
amp_boxplot(ds,
tax.show = 20)
amp_boxplot(ds,
group = "Period",
tax.show = 10,
tax.add = "Phylum")
amp_boxplot(ds,
group = "Period",
tax.show = 5,
tax.add = "Phylum")
#' Load data and convert to a list.
#'
#' Load data and convert to a list.
#'
#' @usage amp_load(otutable, metadata)
#'
#' @param otutable (required) A OTU table. The first row should be OTU name and the last 7 rows taxonomy.
#' @param metadata (required) A metadata file with sample names in first column.
#' @param refseq Reference sequences for all OTUs. Must be loaded with readDNAStringSet() from the biostrings package.
#'
#' @return A phyloseq object.
#'
#' @export
#'
#' @author Mads Albertsen \email{MadsAlbertsen85@@gmail.com}
amp_load <- function(otutable, metadata, refseq = NULL){
#check data
otutable <- as.data.frame(otutable)
metadata <- as.data.frame(metadata) %>% droplevels()
rownames(metadata) <- metadata[,1]
### Only alphanumeric characters in metadata column names, replace others with _
colnames(metadata) <- str_replace_all(colnames(metadata), "[^[:alnum:]]", "_")
### Check if refseq data is in the right format
if(!is.null(refseq) & !class(refseq) == "DNAStringSet") {
stop("The reference sequences must be loaded with readDNAStringSet() from the biostrings package.")
}
### Check if taxonomic data has the correct names
tax.names <- colnames(otutable[, (ncol(otutable) - 6):ncol(otutable)])
expected.tax <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
if(!all(tax.names %in% expected.tax)) {
stop(paste("The sample names in metadata do not match those in otutable.\nOtutable:",
paste(tax.names, collapse = ", "),
"\nExpected:",
paste(expected.tax, collapse =", ")))
}
### Abundance: all columns from otutable except the first and last 7 and convert to numeric for downstream compliance
abund <- lapply(otutable[,1:(ncol(otutable) - 7)], as.numeric) %>% as.data.frame(check.names = F, row.names = rownames(otutable))
### Abundance: re-arrange columns in the same order as the metadata
abund <- abund[,as.character(metadata[,1])]
### Remove whitespace from the otutable as this will break the structure of the taxonomy
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
otutable$Kingdom<-trim(as.character(otutable$Kingdom))
otutable$Phylum<-trim(as.character(otutable$Phylum))
otutable$Class<-trim(as.character(otutable$Class))
otutable$Order<-trim(as.character(otutable$Order))
otutable$Family<-trim(as.character(otutable$Family))
otutable$Genus<-trim(as.character(otutable$Genus))
otutable$Species<-trim(as.character(otutable$Species))
### tax: the last 7 columns from otutable
tax <- data.frame(otutable[, (ncol(otutable) - 6):ncol(otutable)]
,OTU = rownames(otutable))
tax <- tax[order(rownames(tax)), c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "OTU")]
#data: return the data in a combined list w or w/o refseq.
if(!is.null(refseq)) {
data <- list(abund = abund, tax = tax, metadata = metadata, refseq = refseq)
} else {
data <- list(abund = abund, tax = tax, metadata = metadata)
}
return(data)
}
#' Load data and convert to a list.
#'
#' Load data and convert to a list.
#'
#' @usage amp_load(otutable, metadata)
#'
#' @param otutable (required) A OTU table. The first row should be OTU name and the last 7 rows taxonomy.
#' @param metadata (required) A metadata file with sample names in first column.
#' @param refseq Reference sequences for all OTUs. Must be loaded with readDNAStringSet() from the biostrings package.
#'
#' @return A phyloseq object.
#'
#' @export
#'
#' @author Mads Albertsen \email{MadsAlbertsen85@@gmail.com}
amp_load <- function(otutable, metadata, refseq = NULL){
#check data
otutable <- as.data.frame(otutable)
metadata <- as.data.frame(metadata)
rownames(metadata) <- metadata[,1]
### Only alphanumeric characters in metadata column names, replace others with _
colnames(metadata) <- str_replace_all(colnames(metadata), "[^[:alnum:]]", "_")
### Check if refseq data is in the right format
if(!is.null(refseq) & !class(refseq) == "DNAStringSet") {
stop("The reference sequences must be loaded with readDNAStringSet() from the biostrings package.")
}
### Check if taxonomic data has the correct names
tax.names <- colnames(otutable[, (ncol(otutable) - 6):ncol(otutable)])
expected.tax <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
if(!all(tax.names %in% expected.tax)) {
stop(paste("The sample names in metadata do not match those in otutable.\nOtutable:",
paste(tax.names, collapse = ", "),
"\nExpected:",
paste(expected.tax, collapse =", ")))
}
### Abundance: all columns from otutable except the first and last 7 and convert to numeric for downstream compliance
abund <- lapply(otutable[,1:(ncol(otutable) - 7)], as.numeric) %>% as.data.frame(check.names = F, row.names = rownames(otutable))
### Abundance: re-arrange columns in the same order as the metadata
abund <- abund[,as.character(metadata[,1])]
### Remove whitespace from the otutable as this will break the structure of the taxonomy
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
otutable$Kingdom<-trim(as.character(otutable$Kingdom))
otutable$Phylum<-trim(as.character(otutable$Phylum))
otutable$Class<-trim(as.character(otutable$Class))
otutable$Order<-trim(as.character(otutable$Order))
otutable$Family<-trim(as.character(otutable$Family))
otutable$Genus<-trim(as.character(otutable$Genus))
otutable$Species<-trim(as.character(otutable$Species))
### tax: the last 7 columns from otutable
tax <- data.frame(otutable[, (ncol(otutable) - 6):ncol(otutable)]
,OTU = rownames(otutable))
tax <- tax[order(rownames(tax)), c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "OTU")]
#data: return the data in a combined list w or w/o refseq.
if(!is.null(refseq)) {
data <- list(abund = abund, tax = tax, metadata = metadata, refseq = refseq)
} else {
data <- list(abund = abund, tax = tax, metadata = metadata)
}
return(data)
}
amp_boxplot(ds,
group = "Period",
tax.show = 5,
tax.add = "Phylum")
?amp_ordinate
amp_ordinate(ds,
transform = "hellinger",
type = "PCA")
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant")
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant",
sample_colorframe = TRUE)
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant",
sample_colorframe = 1)
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant",
sample_colorframe = TRUE)
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant")
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
pkgdown::build_articles()
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "pcoa",
metric = "bray")
amp_ordinate(ds,
type = "pcoa",
metric = "bray")
View(amp_ordinate)
amp_ordinate(ds,
type = "pcoa")
amp_ordinate(ds,
type = "pcoa",
metric = "bray")
View(betadisper)
?betadisper
View(amp_ordinate)
source('~/R/GitHub/ampvis2/R/amp_ordinate.R')
amp_ordinate(ds,
type = "pcoa",
metric = "bray")
source('~/R/GitHub/ampvis2/R/amp_ordinate.R')
amp_ordinate(ds,
type = "pcoa",
metric = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "pcoa",
metric = "bray",
sample_color = "Year",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "pcoa",
metric = "bray",
sample_color = "Period",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "pcoa",
metric = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
transform = "hellinger",
type = "PCA",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
amp_ordinate(ds,
type = "pcoa",
metric = "bray",
sample_color = "Plant",
sample_colorframe = TRUE,
sample_colorframe_label = "Plant") + theme(legend.position = "blank")
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
devtools::install_github("KasperSkytte/ampvis2")
devtools::install_github("KasperSkytte/ampvis2")
devtools::install_github("KasperSkytte/ampvis2")
library(ampvis2)
data("MiD") #skip this line if you are using your own data
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
amp_heatmap(ds, group = "Plant")
pkgdown::build_site(preview = T)
library(ampvis2)
amp_heatmap(ds,
group = c("Plant", "Year"),
tax.aggregate = "Genus",
tax.add = "Phylum",
tax.show = 25,
color.vector = c("white", "red"),
plot.colorscale = "log10",
plot.numbers = FALSE) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="right")
amp_heatmap(ds, group = "Plant")
library(ampvis2)
data("MiD") #skip this line if you are using your own data
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East"))
ds <- amp_subset_samples(d, Plant %in% c("Aalborg West", "Aalborg East") & !SeqID %in% c("16SAMP-749"), minreads = 10000)
d_Chloroflexi_Actinobacteria <- amp_subset_taxa(d, tax_vector=c("p__Chloroflexi", "p__Actinobacteria"))
install.packages("roxygen2")
create("ampvis2")
library(roxygen2)
create("ampvis2")
install.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
create("ampvis2")
library("roxygen2")
create("ampvis2")
roxygenize()
devtools::install_github("kasperskytte/ampvis2")
library(ampvis2)
pkgdown::build_site()
devtools::install_github("kasperskytte/ampvis2")
devtools::install_github("kasperskytte/ampvis2")
devtools::install_github("kasperskytte/ampvis2")
